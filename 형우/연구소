#연구소
from collections import deque
from copy import deepcopy
move = [[0, 1], [0, -1], [1, 0], [-1, 0]]


def make_wall(idx, n):           # 벽세우기
    global min_virus

    if n == 3:          # 벽 3개 다 세우면 바이러스 체크
        virus_plus()
        return

    for id in range(idx, N*M):
        i = id//M
        j = id % M
        if lab[i][j] == 0:
            lab[i][j] = 1
            make_wall(id+1, n+1)
            lab[i][j] = 0


def virus_plus():           # 바이러스 번식 후 개수 세기
    global min_virus
    virus_visit = [[0] * M for _ in range(N)]
    v_cnt = -v_num          # 첨 카운트 수는  -(초기 바이러스 개수)
    virus = deque()
    for i in range(v_num):
        virus.append(original_virus[i])
    while virus:
        v_cnt += 1
        if v_cnt >= min_virus:   # 이미 최소 바이러스수
            break
        v_x, v_y = virus.popleft()
        for m in move:
            next_x = v_x + m[0]
            next_y = v_y + m[1]
            if 0 <= next_x < N and 0 <= next_y < M:
                if lab[next_x][next_y] == 0:
                    if not virus_visit[next_x][next_y]:
                        virus_visit[next_x][next_y] = 1
                        virus.append((next_x, next_y))

    if v_cnt < min_virus:
        min_virus = v_cnt


N, M = list(map(int, input().split()))
lab = [[] for _ in range(N)]
for n_ in range(N):
    lab[n_] = list(map(int, input().split()))

original_virus = []
total_0 = 0

for i_ in range(N):
    for j_ in range(M):
        if lab[i_][j_] == 2:
            original_virus.append((i_, j_))
        elif not lab[i_][j_]:
            total_0 += 1

v_num = len(original_virus)
min_virus = 100

make_wall(0,0)

print(total_0-3-min_virus)

